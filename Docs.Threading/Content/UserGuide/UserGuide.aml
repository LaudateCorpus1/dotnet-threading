<?xml version="1.0" encoding="utf-8"?>
<topic id="0a33afc9-793d-448a-950f-f03a2ca156d2" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        This library provides improved support for writing asynchronous code targeting the .NET
        Framework 3.5 and newer. Additional information and links to project resources are
        located on the <link xlink:href="50d028db-e522-4750-91a6-4ae6c97c2610"/> page.
      </para>
    </introduction>

    <section address="Features">
      <title>Features</title>
      <content>
        <para>
          The basic features of this library can be described as the following.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <newTerm>Extensions and utilities for legacy code</newTerm>: These extension methods provide
              select features which were added to the Task Parallel Library in .NET 4.5 as extension methods
              and static utility methods for .NET 3.5 and .NET 4.0 users.
            </para>
          </listItem>
          <listItem>
            <para>
              <newTerm>Extensions for task continuations</newTerm>: These extension methods allow developers to
              write task continuations in asynchronous code that behave in similarly to
              <languageKeyword>async</languageKeyword>/<languageKeyword>await</languageKeyword> while maintaining
              support for .NET 3.5 and .NET 4.0.
            </para>
          </listItem>
          <listItem>
            <para>
              <newTerm>Task building blocks</newTerm>: These utility methods
              allow developers to write efficient asynchronous code using high-level block constructs that
              resemble the methods produced by the <languageKeyword>async</languageKeyword> keyword
              while maintaining support for .NET 3.5 and .NET 4.0.
            </para>
          </listItem>
        </list>
      </content>
      <sections>
        <section>
          <title>Extension and Utility Methods for Legacy Code</title>
          <content>
            <para>
              The .NET Framework 4.5 introduces several new methods to simplify the use of the Task Parallel
              Library in common scenarios. This library provides extension methods and static utility methods
              for some of the most frequently used cases, allowing use of the functionality in .NET 3.5 and
              .NET 4.0. These methods are provided by the following classes.
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  <codeEntityReference>T:Rackspace.Threading.CancellationTokenSourceExtensions</codeEntityReference>:
                  This class provides the
                  <codeEntityReference>M:Rackspace.Threading.CancellationTokenSourceExtensions.CancelAfter(System.Threading.CancellationTokenSource,System.TimeSpan)</codeEntityReference>
                  extension method, allowing the use of this feature prior to the introduction of
                  <codeEntityReference>Overload:System.Threading.CancellationTokenSource.CancelAfter</codeEntityReference>
                  in .NET 4.5.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeEntityReference>T:Rackspace.Threading.CompletedTask</codeEntityReference>: This class
                  provides static methods and properties for cases where code needs to return a
                  <codeEntityReference>T:System.Threading.Tasks.Task</codeEntityReference> which has already
                  entered a completed state (either successfully or canceled).
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeEntityReference>T:Rackspace.Threading.DelayedTask</codeEntityReference>: This class
                  provides static methods to simplify the creation of tasks which represent a fixed delay or
                  an operation to wait on one or more other tasks to complete.
                </para>
                <list class="bullet">
                  <listItem>
                    <para>
                      <codeEntityReference>Overload:Rackspace.Threading.DelayedTask.Delay</codeEntityReference>:
                      These methods create tasks which complete after a specified delay period. Their
                      implementation is intended to match the behavior of the
                      <codeEntityReference>Overload:System.Threading.Tasks.Task.Delay</codeEntityReference>
                      methods which were introduced in .NET 4.5.
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      <codeEntityReference>Overload:Rackspace.Threading.DelayedTask.WhenAll</codeEntityReference>:
                      These methods create tasks which complete after all of the specified antecedent tasks
                      complete. Their implementation is intended to match the behavior of the
                      <codeEntityReference>Overload:System.Threading.Tasks.Task.WhenAll</codeEntityReference>
                      methods which were introduced in .NET 4.5.
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      <codeEntityReference>Overload:Rackspace.Threading.DelayedTask.WhenAny</codeEntityReference>:
                      These methods create tasks which complete after any of the specified antecedent tasks
                      complete. Their implementation is intended to match the behavior of the
                      <codeEntityReference>Overload:System.Threading.Tasks.Task.WhenAny</codeEntityReference>
                      methods which were introduced in .NET 4.5.
                    </para>
                  </listItem>
                </list>
              </listItem>
              <listItem>
                <para>
                  <codeEntityReference>T:Rackspace.Threading.StreamExtensions</codeEntityReference>: This
                  class introduces extension methods to support asynchronous operations on
                  <codeEntityReference>T:System.IO.Stream</codeEntityReference> instances, prior to the introduction
                  of asynchronous methods for this class in .NET 4.5.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeEntityReference>T:Rackspace.Threading.WebRequestExtensions</codeEntityReference>: This
                  class provides extension methods which offer extensive support for using
                  <codeEntityReference>T:System.Net.WebRequest</codeEntityReference> in asynchronous code,
                  including support for both <codeEntityReference>T:System.Threading.CancellationToken</codeEntityReference>
                  and traditional timeouts.
                </para>
              </listItem>
            </list>
          </content>
        </section>
        <section>
          <title>Extension Methods for Task Continuations</title>
          <content>
            <para>
              The <codeEntityReference>Overload:System.Threading.Tasks.Task.ContinueWith</codeEntityReference>
              methods provide comprehensive options for writing task continuations, but introduce a number
              of concerns regarding faulted and canceled tasks. Developers must also be careful regarding
              the use of the <codeEntityReference>Overload:System.Threading.Tasks.TaskExtensions.Unwrap</codeEntityReference>
              method. While the <languageKeyword>async</languageKeyword>/<languageKeyword>await</languageKeyword>
              keywords introduced in C# 5 (and similar keywords in other select programming languages) provide
              a cleaner development experience, they are not available for users of earlier versions of the
              language and/or framework. This library provides extension methods to simplify the creation
              of efficient, "well-behaved" task continuations without requiring the use of
              <languageKeyword>async</languageKeyword>/<languageKeyword>await</languageKeyword>.
            </para>
            <para>
              Each of the extension methods provided by this library is implemented in a manner that
              propagates exceptions and/or cancellation closely matching the behavior of code written with
              <languageKeyword>async</languageKeyword>/<languageKeyword>await</languageKeyword>. In
              particular, care is taken to not wrap single exceptions inside multiple layers of
              <codeEntityReference>T:System.AggregateException</codeEntityReference>.
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  <codeEntityReference>Overload:Rackspace.Threading.CoreTaskExtensions.Select</codeEntityReference>:
                  This extension method is intended for cases where code needs to run in-line following
                  the completion of another task (called the <newTerm>antecedent</newTerm> task).
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeEntityReference>Overload:Rackspace.Threading.CoreTaskExtensions.Then</codeEntityReference>:
                  This extension method is intended for cases where another
                  <codeEntityReference>T:System.Threading.Tasks.Task</codeEntityReference> needs to run following
                  the completion of an antecedent task. The extension method automatically calls
                  <codeEntityReference>Overload:System.Threading.Tasks.TaskExtensions.Unwrap</codeEntityReference>,
                  providing an experience similar to using the <languageKeyword>await</languageKeyword> keyword
                  on the call.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeEntityReference>Overload:Rackspace.Threading.CoreTaskExtensions.Catch</codeEntityReference>:
                  This extension method is intended for cases where exception handling code needs to run after
                  an antecedent task is faulted or was canceled. Much like a <languageKeyword>catch</languageKeyword>
                  block in code, this method does change the behavior of the antecedent task if it completed
                  successfully, or if the exception it produced does not match the exception type handled by this
                  method. If the catch method does execute, its result is used in place of the result of the
                  antecedent task.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeEntityReference>Overload:Rackspace.Threading.CoreTaskExtensions.Finally</codeEntityReference>:
                  This extension method is intended for cases where cleanup code needs to run following the
                  completion of an antecedent task, regardless of whether the antecedent succeeded, faulted, or
                  was canceled. Much like a <languageKeyword>finally</languageKeyword> block in code, this method
                  does not alter the result provided by the antecedent task unless an exception is thrown within
                  the <languageKeyword>finally</languageKeyword> block itself.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeEntityReference>M:Rackspace.Threading.CoreTaskExtensions.ObserveExceptions``1(``0)</codeEntityReference>:
                  This extension method ensures the exception for a faulted task is "observed", i.e. the
                  <codeEntityReference>P:System.Threading.Tasks.Task.Exception</codeEntityReference> property
                  will be accessed if the task enters the
                  <codeEntityReference>F:System.Threading.Tasks.TaskStatus.Faulted</codeEntityReference> state.
                </para>
              </listItem>
            </list>
          </content>
        </section>
        <section>
          <title>Task Building Blocks</title>
          <content>
            <para>
              Task building blocks provide support for block-level programming constructs in asynchronous
              code. The resulting execution resembles the behavior of the state machines created by the C#
              compiler to support the <languageKeyword>async</languageKeyword>/<languageKeyword>await</languageKeyword>
              keywords, but does not depend on these features being available. As a result, .NET 3.5 and
              .NET 4.0 developers can enjoy clean, efficient asynchronous code.
            </para>
            <para>
              The following blocks are currently supported by this library.
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  <codeEntityReference>Overload:Rackspace.Threading.TaskBlocks.While</codeEntityReference>:
                  These methods create tasks which operate in a similar manner to a <codeInline>while</codeInline>
                  block written in an <languageKeyword>async</languageKeyword> method (for languages which support
                  <languageKeyword>async</languageKeyword>/<languageKeyword>await</languageKeyword>.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeEntityReference>Overload:Rackspace.Threading.TaskBlocks.Using</codeEntityReference>:
                  These methods create tasks which operate in a similar manner to a <codeInline>using</codeInline>
                  block written in an <languageKeyword>async</languageKeyword> method (for languages which support
                  <languageKeyword>async</languageKeyword>/<languageKeyword>await</languageKeyword>. These methods
                  expand on the <codeInline>using</codeInline> statement provided by C# by implementing support
                  for <codeEntityReference>T:Rackspace.Threading.IAsyncDisposable</codeEntityReference> as described
                  in <externalLink>
                    <linkText>IAsyncDisposable, using statements, and async/await</linkText>
                    <linkUri>http://roslyn.codeplex.com/discussions/546377</linkUri>
                  </externalLink>.
                </para>
              </listItem>
            </list>
          </content>
        </section>
      </sections>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
